name: Compile Flask App from 'with-login' and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    container: ubuntu:bionic

    defaults:
      run:
        working-directory: ./with-login

    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: Install system dependencies (e.g., for Tkinter if PyInstaller needs it)
      run: |
        apt-get update
        apt-get install -y python3-tk
        # Tambahkan dependensi sistem lain jika diperlukan
      working-directory: .

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flask pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Compile application with PyInstaller
      id: compile 
      run: |
        APP_NAME="mirror-manager"
        echo "Compiling ${APP_NAME} from main.py..."
        pyinstaller --name ${APP_NAME} \
                    --onefile \
                    --console \
                    --add-data "static:static" \
                    --add-data "templates:templates" \
                    main.py

        # Menentukan path output relatif terhadap root repositori untuk unggah artefak
        # PyInstaller membuat output di 'dist/' dalam working-directory saat ini ('with-login')
        echo "app_path=with-login/dist/${APP_NAME}" >> $GITHUB_OUTPUT
        echo "app_filename=${APP_NAME}" >> $GITHUB_OUTPUT
        echo "Compiled app path: with-login/dist/${APP_NAME}"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token ini disediakan oleh GitHub Actions
      with:
        tag_name: ${{ github.ref_name }} # Menggunakan nama tag yang memicu alur kerja
        release_name: Release ${{ github.ref_name }}
        body: |
          Rilis otomatis untuk versi ${{ github.ref_name }}.
          Aplikasi Flask dikompilasi dari direktori 'with-login'.
          File yang dieksekusi: ${{ steps.compile.outputs.app_filename }}
        draft: false
        prerelease: false # Setel ke true jika ini adalah pre-release

    - name: Upload Release Asset (Compiled App)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # URL dari langkah create_release
        asset_path: ${{ steps.compile.outputs.app_path }} # Path ke file yang dikompilasi
        asset_name: ${{ steps.compile.outputs.app_filename }} # Nama file di rilis (misal: my_flask_app)
        asset_content_type: application/octet-stream # Tipe konten umum untuk file biner